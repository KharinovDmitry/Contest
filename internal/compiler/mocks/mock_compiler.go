// Code generated by MockGen. DO NOT EDIT.
// Source: internal/compiler/compiler.go

// Package mock_compiler is a generated GoMock package.
package mock_compiler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCompiler is a mock of Compiler interface.
type MockCompiler struct {
	ctrl     *gomock.Controller
	recorder *MockCompilerMockRecorder
}

// MockCompilerMockRecorder is the mock recorder for MockCompiler.
type MockCompilerMockRecorder struct {
	mock *MockCompiler
}

// NewMockCompiler creates a new mock instance.
func NewMockCompiler(ctrl *gomock.Controller) *MockCompiler {
	mock := &MockCompiler{ctrl: ctrl}
	mock.recorder = &MockCompilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompiler) EXPECT() *MockCompilerMockRecorder {
	return m.recorder
}

// CompileCPP mocks base method.
func (m *MockCompiler) CompileCPP(code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompileCPP", code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompileCPP indicates an expected call of CompileCPP.
func (mr *MockCompilerMockRecorder) CompileCPP(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompileCPP", reflect.TypeOf((*MockCompiler)(nil).CompileCPP), code)
}

// CompilePython mocks base method.
func (m *MockCompiler) CompilePython(code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompilePython", code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompilePython indicates an expected call of CompilePython.
func (mr *MockCompilerMockRecorder) CompilePython(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompilePython", reflect.TypeOf((*MockCompiler)(nil).CompilePython), code)
}
