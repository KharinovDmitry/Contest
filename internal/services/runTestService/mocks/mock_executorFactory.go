// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/runTestService/runTestService.go

// Package mock_executorFactory is a generated GoMock package.
package mock_executorFactory

import (
	domain "contest/internal/domain"
	runTestService "contest/internal/services/runTestService"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIExecutor is a mock of IExecutor interface.
type MockIExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockIExecutorMockRecorder
}

// MockIExecutorMockRecorder is the mock recorder for MockIExecutor.
type MockIExecutorMockRecorder struct {
	mock *MockIExecutor
}

// NewMockIExecutor creates a new mock instance.
func NewMockIExecutor(ctrl *gomock.Controller) *MockIExecutor {
	mock := &MockIExecutor{ctrl: ctrl}
	mock.recorder = &MockIExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExecutor) EXPECT() *MockIExecutorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIExecutor) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIExecutorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIExecutor)(nil).Close))
}

// Execute mocks base method.
func (m *MockIExecutor) Execute(input string, memoryLimitInKb, timeLimitInMs int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", input, memoryLimitInKb, timeLimitInMs)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockIExecutorMockRecorder) Execute(input, memoryLimitInKb, timeLimitInMs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIExecutor)(nil).Execute), input, memoryLimitInKb, timeLimitInMs)
}

// MockIExecutorFactory is a mock of IExecutorFactory interface.
type MockIExecutorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIExecutorFactoryMockRecorder
}

// MockIExecutorFactoryMockRecorder is the mock recorder for MockIExecutorFactory.
type MockIExecutorFactoryMockRecorder struct {
	mock *MockIExecutorFactory
}

// NewMockIExecutorFactory creates a new mock instance.
func NewMockIExecutorFactory(ctrl *gomock.Controller) *MockIExecutorFactory {
	mock := &MockIExecutorFactory{ctrl: ctrl}
	mock.recorder = &MockIExecutorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExecutorFactory) EXPECT() *MockIExecutorFactoryMockRecorder {
	return m.recorder
}

// NewExecutor mocks base method.
func (m *MockIExecutorFactory) NewExecutor(code string, language domain.Language) (runTestService.IExecutor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewExecutor", code, language)
	ret0, _ := ret[0].(runTestService.IExecutor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewExecutor indicates an expected call of NewExecutor.
func (mr *MockIExecutorFactoryMockRecorder) NewExecutor(code, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewExecutor", reflect.TypeOf((*MockIExecutorFactory)(nil).NewExecutor), code, language)
}
